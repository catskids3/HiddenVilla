@page "/ParentComponent"

<h1 class="text-danger">Parent Child Component</h1>
<CascadingValue Value="@messageForGrandChild" Name="MessageFromGrandParent">
	<CascadingValue Value="@LuckyNumber" Name="GrandParentsLuckyNumber">
		<ChildComponent @ref="childComp"
						OnClickBtnMethod="ShowMessage"
						Title="This title is passed as parameter from Parent Component">
			<!-- If only one RenderFragment, assume ChildContent and this tag is not needed -->
			<!-- If more than one, the tag is needed -->
			@*<ChildContent>
					Render Fragment From Parent! WooHoo!
				</ChildContent>*@
			<DangerChildContent>
				Danger Content from Render Fragment! WooHoo!
			</DangerChildContent>
		</ChildComponent>
	</CascadingValue>
</CascadingValue>
@*<AnotherChildComponent Placeholder="Enter the Room Name from Parent Component" MaxLength="5"></AnotherChildComponent>*@

@*<AnotherChildComponent InputAttributes="InputAttributesFromParent"></AnotherChildComponent>*@

<AnotherChildComponent placeholder="Placeholder default"></AnotherChildComponent>

<p><b>@messageText</b></p>

<div class="row">
	<button class="btn btn-success" @onclick="()=>childComp.ShowToastrSuccess()">Show Alert</button>
</div>

@code {
	private ChildComponent childComp;

	private string messageForGrandChild = "This is a cascading message from Grand Parent";
	public string LuckyNumber { get; set; } = "7";
	private string messageText = "";
	private void ShowMessage(MouseEventArgs e)
	{
		messageText = "Blazzing text from parent";
	}

	public Dictionary<string, object> InputAttributesFromParent { get; set; } =
new Dictionary<string, object>()
{
		{ "required", "required" },
		{"placeholder", "Enter the Room Name from Parent Component" },
		{"maxlength", 5 }
	};
}
